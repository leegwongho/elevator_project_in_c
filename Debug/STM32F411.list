
STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000476c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004944  08004944  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800494c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000048  08004994  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004994  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4df  00000000  00000000  000200bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298c  00000000  00000000  0002f59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aae  00000000  00000000  00032d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e9a  00000000  00000000  000337ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001303f  00000000  00000000  0004b648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dc8c  00000000  00000000  0005e687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037b8  00000000  00000000  000ec314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000efacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080048ec 	.word	0x080048ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	080048ec 	.word	0x080048ec

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <apInit>:

#include "ap.h"


void apInit()
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	hwInit();
 80004d8:	f000 fdf6 	bl	80010c8 <hwInit>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <HAL_GPIO_EXTI_Callback>:

uint8_t i = 0;
uint32_t cnt0 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	80fb      	strh	r3, [r7, #6]
	 //B_13 = 1층센서 B_14 = 2층센서 B_15 = 3층센서  cw가 올라감 / ccw 내려감
	uint32_t break_cnt = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
	uint32_t break_cnt0 = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]


	Servo_Start();
 80004f2:	f000 fc7d 	bl	8000df0 <Servo_Start>
	servo_test(55);
 80004f6:	2037      	movs	r0, #55	; 0x37
 80004f8:	f000 fc6a 	bl	8000dd0 <servo_test>

	if(GPIO_Pin == GPIO_PIN_13 )	// 1층에 버튼 가정.
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000502:	d16f      	bne.n	80005e4 <HAL_GPIO_EXTI_Callback+0x104>
	{
		i++;
 8000504:	4bb4      	ldr	r3, [pc, #720]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4bb2      	ldr	r3, [pc, #712]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800050e:	701a      	strb	r2, [r3, #0]
		if(i % 2 == 1)
 8000510:	4bb1      	ldr	r3, [pc, #708]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	f003 0301 	and.w	r3, r3, #1
 8000518:	b2db      	uxtb	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d05f      	beq.n	80005de <HAL_GPIO_EXTI_Callback+0xfe>
		{
			Servo_Stop();
 800051e:	f000 fc71 	bl	8000e04 <Servo_Stop>
		break_cnt =  millis();
 8000522:	f000 fde4 	bl	80010ee <millis>
 8000526:	6138      	str	r0, [r7, #16]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000528:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800052c:	f001 fdd0 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
		uint8_t uart_2 = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	75fb      	strb	r3, [r7, #23]
		while(1)
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000534:	2101      	movs	r1, #1
 8000536:	48a9      	ldr	r0, [pc, #676]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000538:	f001 fd98 	bl	800206c <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d110      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x84>
			{
				led_1_On();
 8000542:	f000 fc91 	bl	8000e68 <led_1_On>
				txData = '1';
 8000546:	4ba6      	ldr	r3, [pc, #664]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000548:	2231      	movs	r2, #49	; 0x31
 800054a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	49a4      	ldr	r1, [pc, #656]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000550:	48a4      	ldr	r0, [pc, #656]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000552:	f003 fa30 	bl	80039b6 <HAL_UART_Transmit_IT>
				state_cur = 1;
 8000556:	4ba4      	ldr	r3, [pc, #656]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
				i = 0;
 800055c:	4b9e      	ldr	r3, [pc, #632]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
				break;
 8000562:	e03f      	b.n	80005e4 <HAL_GPIO_EXTI_Callback+0x104>
			}
			else
			{

				break_cnt0 = millis();
 8000564:	f000 fdc3 	bl	80010ee <millis>
 8000568:	60f8      	str	r0, [r7, #12]
				if((break_cnt0 - break_cnt) >= 20000)
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000574:	4293      	cmp	r3, r2
 8000576:	d905      	bls.n	8000584 <HAL_GPIO_EXTI_Callback+0xa4>
				{
					Servo_Start();
 8000578:	f000 fc3a 	bl	8000df0 <Servo_Start>

					servo_test(100);
 800057c:	2064      	movs	r0, #100	; 0x64
 800057e:	f000 fc27 	bl	8000dd0 <servo_test>

				//	Buzzer_Stop();
					break;
 8000582:	e02f      	b.n	80005e4 <HAL_GPIO_EXTI_Callback+0x104>
				}
				else
				{
					rotateDegrees(10, DIR_CW);
 8000584:	2100      	movs	r1, #0
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fd78 	bl	800107c <rotateDegrees>
				}
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800058c:	2102      	movs	r1, #2
 800058e:	4893      	ldr	r0, [pc, #588]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000590:	f001 fd6c 	bl	800206c <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10f      	bne.n	80005ba <HAL_GPIO_EXTI_Callback+0xda>
				{
					if(uart_2 == 0)
 800059a:	7dfb      	ldrb	r3, [r7, #23]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10c      	bne.n	80005ba <HAL_GPIO_EXTI_Callback+0xda>
					{
						led_2_On();
 80005a0:	f000 fc98 	bl	8000ed4 <led_2_On>
						txData = '2';
 80005a4:	4b8e      	ldr	r3, [pc, #568]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80005a6:	2232      	movs	r2, #50	; 0x32
 80005a8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, &txData, 1, 100);
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	2201      	movs	r2, #1
 80005ae:	498c      	ldr	r1, [pc, #560]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80005b0:	488c      	ldr	r0, [pc, #560]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 80005b2:	f003 f96e 	bl	8003892 <HAL_UART_Transmit>
						uart_2 =1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	75fb      	strb	r3, [r7, #23]
					}
				}
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80005ba:	2110      	movs	r1, #16
 80005bc:	4887      	ldr	r0, [pc, #540]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 80005be:	f001 fd55 	bl	800206c <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1b5      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x54>
				{
					txData = '3';
 80005c8:	4b85      	ldr	r3, [pc, #532]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80005ca:	2233      	movs	r2, #51	; 0x33
 80005cc:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4983      	ldr	r1, [pc, #524]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80005d2:	4884      	ldr	r0, [pc, #528]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 80005d4:	f003 f9ef 	bl	80039b6 <HAL_UART_Transmit_IT>
					led_3_On();
 80005d8:	f000 fcb2 	bl	8000f40 <led_3_On>
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 80005dc:	e7aa      	b.n	8000534 <HAL_GPIO_EXTI_Callback+0x54>
			}
		}
		}
		else
		{
			i = 0;
 80005de:	4b7e      	ldr	r3, [pc, #504]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
		}
	}


	if(GPIO_Pin == GPIO_PIN_12)	// 2층에서 누른 올라가는 버튼
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005ea:	f040 80bb 	bne.w	8000764 <HAL_GPIO_EXTI_Callback+0x284>
	{
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80005ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005f2:	f001 fd6d 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
		break_cnt =  millis();
 80005f6:	f000 fd7a 	bl	80010ee <millis>
 80005fa:	6138      	str	r0, [r7, #16]
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 80005fc:	e051      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0x1c2>
		{
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)	//3층 led가 켜져있으면 올라가
 80005fe:	2110      	movs	r1, #16
 8000600:	4876      	ldr	r0, [pc, #472]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000602:	f001 fd33 	bl	800206c <HAL_GPIO_ReadPin>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d14a      	bne.n	80006a2 <HAL_GPIO_EXTI_Callback+0x1c2>
			{
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800060c:	2102      	movs	r1, #2
 800060e:	4873      	ldr	r0, [pc, #460]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000610:	f001 fd2c 	bl	800206c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10d      	bne.n	8000636 <HAL_GPIO_EXTI_Callback+0x156>
				{
					led_2_On();
 800061a:	f000 fc5b 	bl	8000ed4 <led_2_On>
					txData = '2';
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000620:	2232      	movs	r2, #50	; 0x32
 8000622:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	496e      	ldr	r1, [pc, #440]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000628:	486e      	ldr	r0, [pc, #440]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 800062a:	f003 f9c4 	bl	80039b6 <HAL_UART_Transmit_IT>
					state_cur = 2;
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x308>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
					break;
 8000634:	e03c      	b.n	80006b0 <HAL_GPIO_EXTI_Callback+0x1d0>
				}
				else
				{
					break_cnt0 = millis();
 8000636:	f000 fd5a 	bl	80010ee <millis>
 800063a:	60f8      	str	r0, [r7, #12]
					if((break_cnt0 - break_cnt) >= 10000)
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	f242 720f 	movw	r2, #9999	; 0x270f
 8000646:	4293      	cmp	r3, r2
 8000648:	d905      	bls.n	8000656 <HAL_GPIO_EXTI_Callback+0x176>
					{
						Servo_Start();
 800064a:	f000 fbd1 	bl	8000df0 <Servo_Start>

						servo_test(100);
 800064e:	2064      	movs	r0, #100	; 0x64
 8000650:	f000 fbbe 	bl	8000dd0 <servo_test>

					//	Buzzer_Stop();
						break;
 8000654:	e02c      	b.n	80006b0 <HAL_GPIO_EXTI_Callback+0x1d0>
					}
					else{
						rotateDegrees(10, DIR_CCW);
 8000656:	2101      	movs	r1, #1
 8000658:	200a      	movs	r0, #10
 800065a:	f000 fd0f 	bl	800107c <rotateDegrees>
					}

					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 800065e:	2101      	movs	r1, #1
 8000660:	485e      	ldr	r0, [pc, #376]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000662:	f001 fd03 	bl	800206c <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d109      	bne.n	8000680 <HAL_GPIO_EXTI_Callback+0x1a0>
					{
						led_1_On();
 800066c:	f000 fbfc 	bl	8000e68 <led_1_On>
						txData = '2';
 8000670:	4b5b      	ldr	r3, [pc, #364]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000672:	2232      	movs	r2, #50	; 0x32
 8000674:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	4959      	ldr	r1, [pc, #356]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 800067a:	485a      	ldr	r0, [pc, #360]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 800067c:	f003 f99b 	bl	80039b6 <HAL_UART_Transmit_IT>
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000680:	2110      	movs	r1, #16
 8000682:	4856      	ldr	r0, [pc, #344]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000684:	f001 fcf2 	bl	800206c <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d109      	bne.n	80006a2 <HAL_GPIO_EXTI_Callback+0x1c2>
					{
						led_3_On();
 800068e:	f000 fc57 	bl	8000f40 <led_3_On>
						txData = '3';
 8000692:	4b53      	ldr	r3, [pc, #332]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000694:	2233      	movs	r2, #51	; 0x33
 8000696:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	4951      	ldr	r1, [pc, #324]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 800069c:	4851      	ldr	r0, [pc, #324]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 800069e:	f003 f98a 	bl	80039b6 <HAL_UART_Transmit_IT>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 80006a2:	2110      	movs	r1, #16
 80006a4:	484d      	ldr	r0, [pc, #308]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 80006a6:	f001 fce1 	bl	800206c <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d0a6      	beq.n	80005fe <HAL_GPIO_EXTI_Callback+0x11e>
					}
				}
			}
		}
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80006b0:	e051      	b.n	8000756 <HAL_GPIO_EXTI_Callback+0x276>
		{
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)	//1층 led가 켜져있으면 내려가
 80006b2:	2101      	movs	r1, #1
 80006b4:	4849      	ldr	r0, [pc, #292]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 80006b6:	f001 fcd9 	bl	800206c <HAL_GPIO_ReadPin>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d14a      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x276>
			{
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80006c0:	2102      	movs	r1, #2
 80006c2:	4846      	ldr	r0, [pc, #280]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 80006c4:	f001 fcd2 	bl	800206c <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d10d      	bne.n	80006ea <HAL_GPIO_EXTI_Callback+0x20a>
				{
					led_2_On();
 80006ce:	f000 fc01 	bl	8000ed4 <led_2_On>
					txData = '2';
 80006d2:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80006d4:	2232      	movs	r2, #50	; 0x32
 80006d6:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 80006d8:	2201      	movs	r2, #1
 80006da:	4941      	ldr	r1, [pc, #260]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80006dc:	4841      	ldr	r0, [pc, #260]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 80006de:	f003 f96a 	bl	80039b6 <HAL_UART_Transmit_IT>
					state_cur = 2;
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x308>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	701a      	strb	r2, [r3, #0]
					break;
 80006e8:	e03c      	b.n	8000764 <HAL_GPIO_EXTI_Callback+0x284>
				}
				else
				{
					break_cnt0 = millis();
 80006ea:	f000 fd00 	bl	80010ee <millis>
 80006ee:	60f8      	str	r0, [r7, #12]
					if((break_cnt0 - break_cnt) >= 10000)
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d905      	bls.n	800070a <HAL_GPIO_EXTI_Callback+0x22a>
						{
							Servo_Start();
 80006fe:	f000 fb77 	bl	8000df0 <Servo_Start>

							servo_test(100);
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f000 fb64 	bl	8000dd0 <servo_test>

										//	Buzzer_Stop();
							break;
 8000708:	e02c      	b.n	8000764 <HAL_GPIO_EXTI_Callback+0x284>
						}
					else{
							rotateDegrees(10, DIR_CW);
 800070a:	2100      	movs	r1, #0
 800070c:	200a      	movs	r0, #10
 800070e:	f000 fcb5 	bl	800107c <rotateDegrees>
						}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000712:	2101      	movs	r1, #1
 8000714:	4831      	ldr	r0, [pc, #196]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000716:	f001 fca9 	bl	800206c <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d109      	bne.n	8000734 <HAL_GPIO_EXTI_Callback+0x254>
					{
						led_1_On();
 8000720:	f000 fba2 	bl	8000e68 <led_1_On>
						txData = '1';
 8000724:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000726:	2231      	movs	r2, #49	; 0x31
 8000728:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	492c      	ldr	r1, [pc, #176]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 800072e:	482d      	ldr	r0, [pc, #180]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000730:	f003 f941 	bl	80039b6 <HAL_UART_Transmit_IT>
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000734:	2110      	movs	r1, #16
 8000736:	4829      	ldr	r0, [pc, #164]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000738:	f001 fc98 	bl	800206c <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d109      	bne.n	8000756 <HAL_GPIO_EXTI_Callback+0x276>
					{
						led_3_On();
 8000742:	f000 fbfd 	bl	8000f40 <led_3_On>
						txData = '3';
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000748:	2233      	movs	r2, #51	; 0x33
 800074a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	4924      	ldr	r1, [pc, #144]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 8000750:	4824      	ldr	r0, [pc, #144]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 8000752:	f003 f930 	bl	80039b6 <HAL_UART_Transmit_IT>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000756:	2101      	movs	r1, #1
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 800075a:	f001 fc87 	bl	800206c <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d0a6      	beq.n	80006b2 <HAL_GPIO_EXTI_Callback+0x1d2>
				}
			}
		}
	}

	if(GPIO_Pin == GPIO_PIN_15)	// 2층에서 누른 올라가는 버튼
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800076a:	f040 80c6 	bne.w	80008fa <HAL_GPIO_EXTI_Callback+0x41a>
	{
		break_cnt =  millis();
 800076e:	f000 fcbe 	bl	80010ee <millis>
 8000772:	6138      	str	r0, [r7, #16]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000774:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000778:	f001 fcaa 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 800077c:	e05c      	b.n	8000838 <HAL_GPIO_EXTI_Callback+0x358>
			{
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)	//3층 led가 켜져있으면 올라가
 800077e:	2110      	movs	r1, #16
 8000780:	4816      	ldr	r0, [pc, #88]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000782:	f001 fc73 	bl	800206c <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d155      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x358>
				{
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 800078c:	2102      	movs	r1, #2
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000790:	f001 fc6c 	bl	800206c <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10d      	bne.n	80007b6 <HAL_GPIO_EXTI_Callback+0x2d6>
					{
						led_2_On();
 800079a:	f000 fb9b 	bl	8000ed4 <led_2_On>
						txData = '2';
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80007a0:	2232      	movs	r2, #50	; 0x32
 80007a2:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <HAL_GPIO_EXTI_Callback+0x300>)
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <HAL_GPIO_EXTI_Callback+0x304>)
 80007aa:	f003 f904 	bl	80039b6 <HAL_UART_Transmit_IT>
						state_cur = 2;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x308>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
						break;
 80007b4:	e047      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0x366>
					}
					else
					{
						break_cnt0 = millis();
 80007b6:	f000 fc9a 	bl	80010ee <millis>
 80007ba:	60f8      	str	r0, [r7, #12]
						if((break_cnt0 - break_cnt) >= 10000)
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d910      	bls.n	80007ec <HAL_GPIO_EXTI_Callback+0x30c>
						{
							Servo_Start();
 80007ca:	f000 fb11 	bl	8000df0 <Servo_Start>

							servo_test(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f000 fafe 	bl	8000dd0 <servo_test>

											//	Buzzer_Stop();
							break;
 80007d4:	e037      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0x366>
 80007d6:	bf00      	nop
 80007d8:	20000064 	.word	0x20000064
 80007dc:	40020000 	.word	0x40020000
 80007e0:	20000001 	.word	0x20000001
 80007e4:	20000144 	.word	0x20000144
 80007e8:	20000000 	.word	0x20000000
						}
						else{
								rotateDegrees(10, DIR_CCW);
 80007ec:	2101      	movs	r1, #1
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 fc44 	bl	800107c <rotateDegrees>
							}
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 80007f4:	2101      	movs	r1, #1
 80007f6:	4871      	ldr	r0, [pc, #452]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 80007f8:	f001 fc38 	bl	800206c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d109      	bne.n	8000816 <HAL_GPIO_EXTI_Callback+0x336>
						{
							led_1_On();
 8000802:	f000 fb31 	bl	8000e68 <led_1_On>
							txData = '1';
 8000806:	4b6e      	ldr	r3, [pc, #440]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000808:	2231      	movs	r2, #49	; 0x31
 800080a:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	496c      	ldr	r1, [pc, #432]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000810:	486c      	ldr	r0, [pc, #432]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000812:	f003 f8d0 	bl	80039b6 <HAL_UART_Transmit_IT>
						}
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000816:	2110      	movs	r1, #16
 8000818:	4868      	ldr	r0, [pc, #416]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 800081a:	f001 fc27 	bl	800206c <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d109      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x358>
						{
							led_3_On();
 8000824:	f000 fb8c 	bl	8000f40 <led_3_On>
							txData = '3';
 8000828:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800082a:	2233      	movs	r2, #51	; 0x33
 800082c:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	4963      	ldr	r1, [pc, #396]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000832:	4864      	ldr	r0, [pc, #400]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000834:	f003 f8bf 	bl	80039b6 <HAL_UART_Transmit_IT>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1)
 8000838:	2110      	movs	r1, #16
 800083a:	4860      	ldr	r0, [pc, #384]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 800083c:	f001 fc16 	bl	800206c <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d09b      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x29e>
						}
					}
				}
			}
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 8000846:	e051      	b.n	80008ec <HAL_GPIO_EXTI_Callback+0x40c>
			{
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)	//1층 led가 켜져있으면 내려가
 8000848:	2101      	movs	r1, #1
 800084a:	485c      	ldr	r0, [pc, #368]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 800084c:	f001 fc0e 	bl	800206c <HAL_GPIO_ReadPin>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d14a      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x40c>
				{
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000856:	2102      	movs	r1, #2
 8000858:	4858      	ldr	r0, [pc, #352]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 800085a:	f001 fc07 	bl	800206c <HAL_GPIO_ReadPin>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10d      	bne.n	8000880 <HAL_GPIO_EXTI_Callback+0x3a0>
					{
						led_2_On();
 8000864:	f000 fb36 	bl	8000ed4 <led_2_On>
						state_cur = 2;
 8000868:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x4e8>)
 800086a:	2202      	movs	r2, #2
 800086c:	701a      	strb	r2, [r3, #0]
						txData = '2';
 800086e:	4b54      	ldr	r3, [pc, #336]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000870:	2232      	movs	r2, #50	; 0x32
 8000872:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	4952      	ldr	r1, [pc, #328]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000878:	4852      	ldr	r0, [pc, #328]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800087a:	f003 f89c 	bl	80039b6 <HAL_UART_Transmit_IT>
						break;
 800087e:	e03c      	b.n	80008fa <HAL_GPIO_EXTI_Callback+0x41a>
					}
					else
					{
						break_cnt0 = millis();
 8000880:	f000 fc35 	bl	80010ee <millis>
 8000884:	60f8      	str	r0, [r7, #12]
						if((break_cnt0 - break_cnt) >= 10000)
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000890:	4293      	cmp	r3, r2
 8000892:	d905      	bls.n	80008a0 <HAL_GPIO_EXTI_Callback+0x3c0>
						{
							Servo_Start();
 8000894:	f000 faac 	bl	8000df0 <Servo_Start>

							servo_test(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f000 fa99 	bl	8000dd0 <servo_test>

																	//	Buzzer_Stop();
							break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_EXTI_Callback+0x41a>
						}
						else{
							rotateDegrees(10, DIR_CW);
 80008a0:	2100      	movs	r1, #0
 80008a2:	200a      	movs	r0, #10
 80008a4:	f000 fbea 	bl	800107c <rotateDegrees>
						}
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 80008a8:	2101      	movs	r1, #1
 80008aa:	4844      	ldr	r0, [pc, #272]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008ac:	f001 fbde 	bl	800206c <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d109      	bne.n	80008ca <HAL_GPIO_EXTI_Callback+0x3ea>
						{
							led_1_On();
 80008b6:	f000 fad7 	bl	8000e68 <led_1_On>
							txData = '1';
 80008ba:	4b41      	ldr	r3, [pc, #260]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80008bc:	2231      	movs	r2, #49	; 0x31
 80008be:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_IT(&huart2, &txData, 1);
 80008c0:	2201      	movs	r2, #1
 80008c2:	493f      	ldr	r1, [pc, #252]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80008c4:	483f      	ldr	r0, [pc, #252]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80008c6:	f003 f876 	bl	80039b6 <HAL_UART_Transmit_IT>
						}
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80008ca:	2110      	movs	r1, #16
 80008cc:	483b      	ldr	r0, [pc, #236]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008ce:	f001 fbcd 	bl	800206c <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d109      	bne.n	80008ec <HAL_GPIO_EXTI_Callback+0x40c>
						{
							led_3_On();
 80008d8:	f000 fb32 	bl	8000f40 <led_3_On>
							txData = '3';
 80008dc:	4b38      	ldr	r3, [pc, #224]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80008de:	2233      	movs	r2, #51	; 0x33
 80008e0:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_IT(&huart2, &txData, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	4936      	ldr	r1, [pc, #216]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80008e6:	4837      	ldr	r0, [pc, #220]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80008e8:	f003 f865 	bl	80039b6 <HAL_UART_Transmit_IT>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4833      	ldr	r0, [pc, #204]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008f0:	f001 fbbc 	bl	800206c <HAL_GPIO_ReadPin>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d0a6      	beq.n	8000848 <HAL_GPIO_EXTI_Callback+0x368>
					}
				}
			}
	}

	if(GPIO_Pin == GPIO_PIN_7)	// 3층에서 누른 버튼
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b80      	cmp	r3, #128	; 0x80
 80008fe:	d159      	bne.n	80009b4 <HAL_GPIO_EXTI_Callback+0x4d4>
	{
		break_cnt =  millis();
 8000900:	f000 fbf5 	bl	80010ee <millis>
 8000904:	6138      	str	r0, [r7, #16]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	f001 fbe2 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
		uint8_t uart_2 = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	75bb      	strb	r3, [r7, #22]
		while(1)
		{
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000910:	2110      	movs	r1, #16
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000914:	f001 fbaa 	bl	800206c <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10d      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x45a>
			{
				led_3_On();
 800091e:	f000 fb0f 	bl	8000f40 <led_3_On>
				txData = '3';
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000924:	2233      	movs	r2, #51	; 0x33
 8000926:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	4925      	ldr	r1, [pc, #148]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800092c:	4825      	ldr	r0, [pc, #148]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800092e:	f003 f842 	bl	80039b6 <HAL_UART_Transmit_IT>
				state_cur = 3;
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8000934:	2203      	movs	r2, #3
 8000936:	701a      	strb	r2, [r3, #0]
				break;
 8000938:	e03c      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x4d4>
			}
			else
			{
				break_cnt0 = millis();
 800093a:	f000 fbd8 	bl	80010ee <millis>
 800093e:	60f8      	str	r0, [r7, #12]
				if((break_cnt0 - break_cnt) >= 20000)
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800094a:	4293      	cmp	r3, r2
 800094c:	d905      	bls.n	800095a <HAL_GPIO_EXTI_Callback+0x47a>
				{
					Servo_Start();
 800094e:	f000 fa4f 	bl	8000df0 <Servo_Start>

					servo_test(100);
 8000952:	2064      	movs	r0, #100	; 0x64
 8000954:	f000 fa3c 	bl	8000dd0 <servo_test>

															//	Buzzer_Stop();
					break;
 8000958:	e02c      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x4d4>
				}
				else{
					rotateDegrees(10, DIR_CCW);
 800095a:	2101      	movs	r1, #1
 800095c:	200a      	movs	r0, #10
 800095e:	f000 fb8d 	bl	800107c <rotateDegrees>
				}

				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000962:	2101      	movs	r1, #1
 8000964:	4815      	ldr	r0, [pc, #84]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000966:	f001 fb81 	bl	800206c <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d109      	bne.n	8000984 <HAL_GPIO_EXTI_Callback+0x4a4>
				{
					led_1_On();
 8000970:	f000 fa7a 	bl	8000e68 <led_1_On>
					txData = '1';
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000976:	2231      	movs	r2, #49	; 0x31
 8000978:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	4910      	ldr	r1, [pc, #64]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000980:	f003 f819 	bl	80039b6 <HAL_UART_Transmit_IT>
				}
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000984:	2102      	movs	r1, #2
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000988:	f001 fb70 	bl	800206c <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d1be      	bne.n	8000910 <HAL_GPIO_EXTI_Callback+0x430>
				{
					if(uart_2 == 0)
 8000992:	7dbb      	ldrb	r3, [r7, #22]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1bb      	bne.n	8000910 <HAL_GPIO_EXTI_Callback+0x430>
					{
						led_2_On();
 8000998:	f000 fa9c 	bl	8000ed4 <led_2_On>
						txData = '2';
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800099e:	2232      	movs	r2, #50	; 0x32
 80009a0:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, &txData, 1, 100);
 80009a2:	2364      	movs	r3, #100	; 0x64
 80009a4:	2201      	movs	r2, #1
 80009a6:	4906      	ldr	r1, [pc, #24]	; (80009c0 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_GPIO_EXTI_Callback+0x4e4>)
 80009aa:	f002 ff72 	bl	8003892 <HAL_UART_Transmit>
						uart_2 =1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	75bb      	strb	r3, [r7, #22]
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 80009b2:	e7ad      	b.n	8000910 <HAL_GPIO_EXTI_Callback+0x430>
					}
				}
			}
		}
	}
}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40020000 	.word	0x40020000
 80009c0:	20000001 	.word	0x20000001
 80009c4:	20000144 	.word	0x20000144
 80009c8:	20000000 	.word	0x20000000

080009cc <apMain>:

uint8_t break_cnt;
uint8_t break_cnt0;

void apMain()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
	led_1_On();
 80009d2:	f000 fa49 	bl	8000e68 <led_1_On>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);	// 1층에서 누른 버튼
 80009d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009da:	f001 fb79 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);	// 2층에서 누른 올라가는 버튼
 80009de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009e2:	f001 fb75 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);	// 2층에서 누른 내려가는 버튼
 80009e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009ea:	f001 fb71 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);	// 3층에서 누른 버튼
 80009ee:	2080      	movs	r0, #128	; 0x80
 80009f0:	f001 fb6e 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>

	while(1)
	{
		//버튼 0번은 1층으로, 버튼 1번은 2층으로, 버튼 2번은 3층으로
		if(state_cur == 1)
 80009f4:	4ba9      	ldr	r3, [pc, #676]	; (8000c9c <apMain+0x2d0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	f040 8086 	bne.w	8000b0a <apMain+0x13e>
		{
			if(buttonGetPressed(1))	// 1층 올림 >> 2
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 f9a2 	bl	8000d48 <buttonGetPressed>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d02b      	beq.n	8000a62 <apMain+0x96>
			{
				cnt0 = 0;
 8000a0a:	4ba5      	ldr	r3, [pc, #660]	; (8000ca0 <apMain+0x2d4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
				while(1){
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000a10:	2102      	movs	r1, #2
 8000a12:	48a4      	ldr	r0, [pc, #656]	; (8000ca4 <apMain+0x2d8>)
 8000a14:	f001 fb2a 	bl	800206c <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10d      	bne.n	8000a3a <apMain+0x6e>
				{
					led_2_On();
 8000a1e:	f000 fa59 	bl	8000ed4 <led_2_On>
					txData = '2';
 8000a22:	4ba1      	ldr	r3, [pc, #644]	; (8000ca8 <apMain+0x2dc>)
 8000a24:	2232      	movs	r2, #50	; 0x32
 8000a26:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	499f      	ldr	r1, [pc, #636]	; (8000ca8 <apMain+0x2dc>)
 8000a2c:	489f      	ldr	r0, [pc, #636]	; (8000cac <apMain+0x2e0>)
 8000a2e:	f002 ffc2 	bl	80039b6 <HAL_UART_Transmit_IT>
					state_cur = 2;
 8000a32:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <apMain+0x2d0>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	701a      	strb	r2, [r3, #0]
					break;
 8000a38:	e013      	b.n	8000a62 <apMain+0x96>
				}
				if(cnt0 >= 100)
 8000a3a:	4b99      	ldr	r3, [pc, #612]	; (8000ca0 <apMain+0x2d4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b63      	cmp	r3, #99	; 0x63
 8000a40:	d905      	bls.n	8000a4e <apMain+0x82>
				{
					Servo_Start();
 8000a42:	f000 f9d5 	bl	8000df0 <Servo_Start>
					servo_test(100);				//	Buzzer_Stop();
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 f9c2 	bl	8000dd0 <servo_test>
					break;
 8000a4c:	e009      	b.n	8000a62 <apMain+0x96>
				}
				else
				{
					rotateDegrees(10, DIR_CCW);
 8000a4e:	2101      	movs	r1, #1
 8000a50:	200a      	movs	r0, #10
 8000a52:	f000 fb13 	bl	800107c <rotateDegrees>
					cnt0++;
 8000a56:	4b92      	ldr	r3, [pc, #584]	; (8000ca0 <apMain+0x2d4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a90      	ldr	r2, [pc, #576]	; (8000ca0 <apMain+0x2d4>)
 8000a5e:	6013      	str	r3, [r2, #0]
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000a60:	e7d6      	b.n	8000a10 <apMain+0x44>
				}
			}
		}

			if(buttonGetPressed(2))	// 1층에서 >> 3층
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 f970 	bl	8000d48 <buttonGetPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d04d      	beq.n	8000b0a <apMain+0x13e>
			{
				cnt0 = 0;
 8000a6e:	4b8c      	ldr	r3, [pc, #560]	; (8000ca0 <apMain+0x2d4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
				uint8_t uart_2 = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	71fb      	strb	r3, [r7, #7]
				while(1)
				{
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 8000a78:	2110      	movs	r1, #16
 8000a7a:	488a      	ldr	r0, [pc, #552]	; (8000ca4 <apMain+0x2d8>)
 8000a7c:	f001 faf6 	bl	800206c <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <apMain+0xc2>
						state_cur = 3;
 8000a86:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <apMain+0x2d0>)
 8000a88:	2203      	movs	r2, #3
 8000a8a:	701a      	strb	r2, [r3, #0]
						break;
 8000a8c:	e03d      	b.n	8000b0a <apMain+0x13e>
					}

					if(cnt0 >= 190)
 8000a8e:	4b84      	ldr	r3, [pc, #528]	; (8000ca0 <apMain+0x2d4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2bbd      	cmp	r3, #189	; 0xbd
 8000a94:	d905      	bls.n	8000aa2 <apMain+0xd6>
					{
						Servo_Start();
 8000a96:	f000 f9ab 	bl	8000df0 <Servo_Start>

						servo_test(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f000 f998 	bl	8000dd0 <servo_test>
						//	Buzzer_Stop();
						break;
 8000aa0:	e033      	b.n	8000b0a <apMain+0x13e>
					}
					else
					{
						rotateDegrees(10, DIR_CCW);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f000 fae9 	bl	800107c <rotateDegrees>
						cnt0++;
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	; (8000ca0 <apMain+0x2d4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a7b      	ldr	r2, [pc, #492]	; (8000ca0 <apMain+0x2d4>)
 8000ab2:	6013      	str	r3, [r2, #0]
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	487b      	ldr	r0, [pc, #492]	; (8000ca4 <apMain+0x2d8>)
 8000ab8:	f001 fad8 	bl	800206c <HAL_GPIO_ReadPin>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d111      	bne.n	8000ae6 <apMain+0x11a>
					{
						led_2_On();
 8000ac2:	f000 fa07 	bl	8000ed4 <led_2_On>
						if(uart_2 == 0)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d10c      	bne.n	8000ae6 <apMain+0x11a>
						{
							led_2_On();
 8000acc:	f000 fa02 	bl	8000ed4 <led_2_On>
							txData = '2';
 8000ad0:	4b75      	ldr	r3, [pc, #468]	; (8000ca8 <apMain+0x2dc>)
 8000ad2:	2232      	movs	r2, #50	; 0x32
 8000ad4:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, &txData, 1, 100);
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4973      	ldr	r1, [pc, #460]	; (8000ca8 <apMain+0x2dc>)
 8000adc:	4873      	ldr	r0, [pc, #460]	; (8000cac <apMain+0x2e0>)
 8000ade:	f002 fed8 	bl	8003892 <HAL_UART_Transmit>
							uart_2 =1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
						}
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0)
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	486e      	ldr	r0, [pc, #440]	; (8000ca4 <apMain+0x2d8>)
 8000aea:	f001 fabf 	bl	800206c <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1c1      	bne.n	8000a78 <apMain+0xac>
					{
						led_3_On();
 8000af4:	f000 fa24 	bl	8000f40 <led_3_On>
						txData = '3';
 8000af8:	4b6b      	ldr	r3, [pc, #428]	; (8000ca8 <apMain+0x2dc>)
 8000afa:	2233      	movs	r2, #51	; 0x33
 8000afc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	4969      	ldr	r1, [pc, #420]	; (8000ca8 <apMain+0x2dc>)
 8000b02:	486a      	ldr	r0, [pc, #424]	; (8000cac <apMain+0x2e0>)
 8000b04:	f002 ff57 	bl	80039b6 <HAL_UART_Transmit_IT>
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 8000b08:	e7b6      	b.n	8000a78 <apMain+0xac>
					}
				}
			}
		}

		if(state_cur == 2)
 8000b0a:	4b64      	ldr	r3, [pc, #400]	; (8000c9c <apMain+0x2d0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d163      	bne.n	8000bda <apMain+0x20e>
		{

			if (buttonGetPressed(0))	// 2층 >> 1층
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f918 	bl	8000d48 <buttonGetPressed>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d02b      	beq.n	8000b76 <apMain+0x1aa>
			{
				cnt0 = 0;
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <apMain+0x2d4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
				while(1){
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000b24:	2101      	movs	r1, #1
 8000b26:	485f      	ldr	r0, [pc, #380]	; (8000ca4 <apMain+0x2d8>)
 8000b28:	f001 faa0 	bl	800206c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10d      	bne.n	8000b4e <apMain+0x182>
				{
					led_1_On();
 8000b32:	f000 f999 	bl	8000e68 <led_1_On>
					txData = '1';
 8000b36:	4b5c      	ldr	r3, [pc, #368]	; (8000ca8 <apMain+0x2dc>)
 8000b38:	2231      	movs	r2, #49	; 0x31
 8000b3a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	495a      	ldr	r1, [pc, #360]	; (8000ca8 <apMain+0x2dc>)
 8000b40:	485a      	ldr	r0, [pc, #360]	; (8000cac <apMain+0x2e0>)
 8000b42:	f002 ff38 	bl	80039b6 <HAL_UART_Transmit_IT>
					state_cur = 1;
 8000b46:	4b55      	ldr	r3, [pc, #340]	; (8000c9c <apMain+0x2d0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
					break;
 8000b4c:	e013      	b.n	8000b76 <apMain+0x1aa>
				}

				if(cnt0  >= 100)
 8000b4e:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <apMain+0x2d4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b63      	cmp	r3, #99	; 0x63
 8000b54:	d905      	bls.n	8000b62 <apMain+0x196>
				{
					Servo_Start();
 8000b56:	f000 f94b 	bl	8000df0 <Servo_Start>

					servo_test(100);							//	Buzzer_Stop();
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 f938 	bl	8000dd0 <servo_test>
					break;
 8000b60:	e009      	b.n	8000b76 <apMain+0x1aa>
				}
				else
				{
					rotateDegrees(10, DIR_CW);
 8000b62:	2100      	movs	r1, #0
 8000b64:	200a      	movs	r0, #10
 8000b66:	f000 fa89 	bl	800107c <rotateDegrees>
					cnt0++;
 8000b6a:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <apMain+0x2d4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a4b      	ldr	r2, [pc, #300]	; (8000ca0 <apMain+0x2d4>)
 8000b72:	6013      	str	r3, [r2, #0]
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000b74:	e7d6      	b.n	8000b24 <apMain+0x158>
				}
				}
			}

			if (buttonGetPressed(2))	// 2층 >> 3층
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 f8e6 	bl	8000d48 <buttonGetPressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d02b      	beq.n	8000bda <apMain+0x20e>
			{
				cnt0 = 0;
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <apMain+0x2d4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
				while(1){
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4846      	ldr	r0, [pc, #280]	; (8000ca4 <apMain+0x2d8>)
 8000b8c:	f001 fa6e 	bl	800206c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10d      	bne.n	8000bb2 <apMain+0x1e6>
					led_3_On();
 8000b96:	f000 f9d3 	bl	8000f40 <led_3_On>
					txData = '3';
 8000b9a:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <apMain+0x2dc>)
 8000b9c:	2233      	movs	r2, #51	; 0x33
 8000b9e:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4941      	ldr	r1, [pc, #260]	; (8000ca8 <apMain+0x2dc>)
 8000ba4:	4841      	ldr	r0, [pc, #260]	; (8000cac <apMain+0x2e0>)
 8000ba6:	f002 ff06 	bl	80039b6 <HAL_UART_Transmit_IT>
					state_cur = 3;
 8000baa:	4b3c      	ldr	r3, [pc, #240]	; (8000c9c <apMain+0x2d0>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	701a      	strb	r2, [r3, #0]
					break;
 8000bb0:	e013      	b.n	8000bda <apMain+0x20e>
				}
				if(cnt0  >= 100)
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <apMain+0x2d4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b63      	cmp	r3, #99	; 0x63
 8000bb8:	d905      	bls.n	8000bc6 <apMain+0x1fa>
				{
					Servo_Start();
 8000bba:	f000 f919 	bl	8000df0 <Servo_Start>

					servo_test(100);				//	Buzzer_Stop();
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f000 f906 	bl	8000dd0 <servo_test>
					break;
 8000bc4:	e009      	b.n	8000bda <apMain+0x20e>
				}
				else
				{
					rotateDegrees(10, DIR_CCW);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	200a      	movs	r0, #10
 8000bca:	f000 fa57 	bl	800107c <rotateDegrees>
					cnt0++;
 8000bce:	4b34      	ldr	r3, [pc, #208]	; (8000ca0 <apMain+0x2d4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a32      	ldr	r2, [pc, #200]	; (8000ca0 <apMain+0x2d4>)
 8000bd6:	6013      	str	r3, [r2, #0]
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 8000bd8:	e7d6      	b.n	8000b88 <apMain+0x1bc>
				}
				}
			}
		}

		if(state_cur == 3)
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <apMain+0x2d0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	f47f af08 	bne.w	80009f4 <apMain+0x28>
		{
			if (buttonGetPressed(0))	// 3층 >> 1층
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f8af 	bl	8000d48 <buttonGetPressed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d05f      	beq.n	8000cb0 <apMain+0x2e4>
			{
				cnt0 = 0;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <apMain+0x2d4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
				uint8_t uart_2 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71bb      	strb	r3, [r7, #6]
				while(1)
				{
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <apMain+0x2d8>)
 8000bfe:	f001 fa35 	bl	800206c <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d10d      	bne.n	8000c24 <apMain+0x258>
					{
						led_1_On();
 8000c08:	f000 f92e 	bl	8000e68 <led_1_On>
						txData = '1';
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <apMain+0x2dc>)
 8000c0e:	2231      	movs	r2, #49	; 0x31
 8000c10:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	4924      	ldr	r1, [pc, #144]	; (8000ca8 <apMain+0x2dc>)
 8000c16:	4825      	ldr	r0, [pc, #148]	; (8000cac <apMain+0x2e0>)
 8000c18:	f002 fecd 	bl	80039b6 <HAL_UART_Transmit_IT>
						state_cur = 1;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <apMain+0x2d0>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
						break;
 8000c22:	e045      	b.n	8000cb0 <apMain+0x2e4>
					}

					if(cnt0 >= 190)
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <apMain+0x2d4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2bbd      	cmp	r3, #189	; 0xbd
 8000c2a:	d905      	bls.n	8000c38 <apMain+0x26c>
					{
						Servo_Start();
 8000c2c:	f000 f8e0 	bl	8000df0 <Servo_Start>

						servo_test(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f000 f8cd 	bl	8000dd0 <servo_test>
							//	Buzzer_Stop();
						break;
 8000c36:	e03b      	b.n	8000cb0 <apMain+0x2e4>
					}
					else
					{
						rotateDegrees(10, DIR_CW);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200a      	movs	r0, #10
 8000c3c:	f000 fa1e 	bl	800107c <rotateDegrees>
						cnt0++;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <apMain+0x2d4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <apMain+0x2d4>)
 8000c48:	6013      	str	r3, [r2, #0]
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <apMain+0x2d8>)
 8000c4e:	f001 fa0d 	bl	800206c <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <apMain+0x2a0>
					{
						led_1_On();
 8000c58:	f000 f906 	bl	8000e68 <led_1_On>
						txData = '1';
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <apMain+0x2dc>)
 8000c5e:	2231      	movs	r2, #49	; 0x31
 8000c60:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_IT(&huart2, &txData, 1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	4910      	ldr	r1, [pc, #64]	; (8000ca8 <apMain+0x2dc>)
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <apMain+0x2e0>)
 8000c68:	f002 fea5 	bl	80039b6 <HAL_UART_Transmit_IT>
					}
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==0)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <apMain+0x2d8>)
 8000c70:	f001 f9fc 	bl	800206c <HAL_GPIO_ReadPin>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1bf      	bne.n	8000bfa <apMain+0x22e>
					{
						if(uart_2 == 0)
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1bc      	bne.n	8000bfa <apMain+0x22e>
						{
							led_2_On();
 8000c80:	f000 f928 	bl	8000ed4 <led_2_On>
							txData = '2';
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <apMain+0x2dc>)
 8000c86:	2232      	movs	r2, #50	; 0x32
 8000c88:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, &txData, 1, 100);
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <apMain+0x2dc>)
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <apMain+0x2e0>)
 8000c92:	f002 fdfe 	bl	8003892 <HAL_UART_Transmit>
							uart_2 =1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	71bb      	strb	r3, [r7, #6]
					if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0)
 8000c9a:	e7ae      	b.n	8000bfa <apMain+0x22e>
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000068 	.word	0x20000068
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	20000001 	.word	0x20000001
 8000cac:	20000144 	.word	0x20000144
						}
					}
				}
			}

			if (buttonGetPressed(1))	// 3층 >> 2층
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 f849 	bl	8000d48 <buttonGetPressed>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f43f ae9b 	beq.w	80009f4 <apMain+0x28>
			{
				cnt0 = 0;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <apMain+0x350>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
				while(1)
				{
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <apMain+0x354>)
 8000cc8:	f001 f9d0 	bl	800206c <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10e      	bne.n	8000cf0 <apMain+0x324>
					{
						led_2_On();
 8000cd2:	f000 f8ff 	bl	8000ed4 <led_2_On>
						txData = '2';
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <apMain+0x358>)
 8000cd8:	2232      	movs	r2, #50	; 0x32
 8000cda:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, &txData, 1, 1);
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4910      	ldr	r1, [pc, #64]	; (8000d24 <apMain+0x358>)
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <apMain+0x35c>)
 8000ce4:	f002 fdd5 	bl	8003892 <HAL_UART_Transmit>
						state_cur = 2;
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <apMain+0x360>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	701a      	strb	r2, [r3, #0]
						break;
 8000cee:	e013      	b.n	8000d18 <apMain+0x34c>
					}

					if(cnt0 >= 100)
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <apMain+0x350>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b63      	cmp	r3, #99	; 0x63
 8000cf6:	d905      	bls.n	8000d04 <apMain+0x338>
					{
						Servo_Start();
 8000cf8:	f000 f87a 	bl	8000df0 <Servo_Start>
						servo_test(100);
 8000cfc:	2064      	movs	r0, #100	; 0x64
 8000cfe:	f000 f867 	bl	8000dd0 <servo_test>
								//	Buzzer_Stop();
						break;
 8000d02:	e009      	b.n	8000d18 <apMain+0x34c>
					}
					else
					{
						rotateDegrees(10, DIR_CW);
 8000d04:	2100      	movs	r1, #0
 8000d06:	200a      	movs	r0, #10
 8000d08:	f000 f9b8 	bl	800107c <rotateDegrees>
						cnt0++;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <apMain+0x350>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a02      	ldr	r2, [pc, #8]	; (8000d1c <apMain+0x350>)
 8000d14:	6013      	str	r3, [r2, #0]
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 8000d16:	e7d5      	b.n	8000cc4 <apMain+0x2f8>
		if(state_cur == 1)
 8000d18:	e66c      	b.n	80009f4 <apMain+0x28>
 8000d1a:	bf00      	nop
 8000d1c:	20000068 	.word	0x20000068
 8000d20:	40020000 	.word	0x40020000
 8000d24:	20000001 	.word	0x20000001
 8000d28:	20000144 	.word	0x20000144
 8000d2c:	20000000 	.word	0x20000000

08000d30 <buttonInit>:
		{GPIOC, GPIO_PIN_2, 0},
		{GPIOC, GPIO_PIN_13, 0}
};

bool buttonInit()
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	bool ret = true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]

	return ret;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]

	if(ch >= _BUTTON_MAX_CH)
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	2b06      	cmp	r3, #6
 8000d5a:	d901      	bls.n	8000d60 <buttonGetPressed+0x18>
	{
		return ret;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	e031      	b.n	8000dc4 <buttonGetPressed+0x7c>
	}

	if(HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].PinNumber) == button_tbl[ch].onState)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <buttonGetPressed+0x84>)
 8000d64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4918      	ldr	r1, [pc, #96]	; (8000dcc <buttonGetPressed+0x84>)
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f001 f979 	bl	800206c <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <buttonGetPressed+0x84>)
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4413      	add	r3, r2
 8000d86:	799b      	ldrb	r3, [r3, #6]
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d11a      	bne.n	8000dc2 <buttonGetPressed+0x7a>
	{
		delay(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 f9a3 	bl	80010d8 <delay>
		if(HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].PinNumber) == button_tbl[ch].onState)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <buttonGetPressed+0x84>)
 8000d96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	490b      	ldr	r1, [pc, #44]	; (8000dcc <buttonGetPressed+0x84>)
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f001 f960 	bl	800206c <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4619      	mov	r1, r3
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <buttonGetPressed+0x84>)
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d101      	bne.n	8000dc2 <buttonGetPressed+0x7a>
		{
			ret = true;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return ret;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <servo_test>:
    // PWM 채널의 듀티 사이클을 설정합니다.
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width);
}


void servo_test(uint32_t ang){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = ang;
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <servo_test+0x1c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6353      	str	r3, [r2, #52]	; 0x34

}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40000400 	.word	0x40000400

08000df0 <Servo_Start>:





void Servo_Start(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <Servo_Start+0x10>)
 8000df8:	f001 ff3a 	bl	8002c70 <HAL_TIM_PWM_Start>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000006c 	.word	0x2000006c

08000e04 <Servo_Stop>:

void Servo_Stop(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4802      	ldr	r0, [pc, #8]	; (8000e14 <Servo_Stop+0x10>)
 8000e0c:	f001 ffe0 	bl	8002dd0 <HAL_TIM_PWM_Stop>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000006c 	.word	0x2000006c

08000e18 <delay_us>:

#include "delay.h"

void delay_us(uint16_t us)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);			// 타이머 10번 0으로 리셋
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <delay_us+0x34>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start(&htim10);				// 타이머 10번 시작
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <delay_us+0x34>)
 8000e2c:	f001 fe50 	bl	8002ad0 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);	// 카운트가 us보다 작으면 while문에 묶임
 8000e30:	bf00      	nop
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <delay_us+0x34>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3f9      	bcc.n	8000e32 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&htim10); 				// 타이머 10번 중지
 8000e3e:	4803      	ldr	r0, [pc, #12]	; (8000e4c <delay_us+0x34>)
 8000e40:	f001 fea0 	bl	8002b84 <HAL_TIM_Base_Stop>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000b4 	.word	0x200000b4

08000e50 <ledInit>:
		{GPIOA, GPIO_PIN_10, GPIO_PIN_SET, GPIO_PIN_RESET},	//g
		{GPIOC, GPIO_PIN_7, GPIO_PIN_SET, GPIO_PIN_RESET}	//.
};

bool ledInit()
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
	bool ret = true;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <led_1_On>:




void led_1_On()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	// 1	b c = 1 / 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <led_1_On+0x60>)
 8000e74:	f001 f912 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	4813      	ldr	r0, [pc, #76]	; (8000ecc <led_1_On+0x64>)
 8000e80:	f001 f90c 	bl	800209c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8a:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <led_1_On+0x60>)
 8000e8c:	f001 f906 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <led_1_On+0x64>)
 8000e96:	f001 f901 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	480b      	ldr	r0, [pc, #44]	; (8000ecc <led_1_On+0x64>)
 8000ea0:	f001 f8fc 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <led_1_On+0x64>)
 8000eaa:	f001 f8f7 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <led_1_On+0x60>)
 8000eb6:	f001 f8f1 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <led_1_On+0x68>)
 8000ec0:	f001 f8ec 	bl	800209c <HAL_GPIO_WritePin>

	// 2	a b g d e = 1 / 0

	// 3	a b c d g = 1 / 0
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <led_2_On>:

void led_2_On()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	// 1	b c = 1 / 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <led_2_On+0x60>)
 8000ee0:	f001 f8dc 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <led_2_On+0x64>)
 8000eec:	f001 f8d6 	bl	800209c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	480f      	ldr	r0, [pc, #60]	; (8000f34 <led_2_On+0x60>)
 8000ef8:	f001 f8d0 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2110      	movs	r1, #16
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <led_2_On+0x64>)
 8000f02:	f001 f8cb 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2120      	movs	r1, #32
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <led_2_On+0x64>)
 8000f0c:	f001 f8c6 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2108      	movs	r1, #8
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <led_2_On+0x64>)
 8000f16:	f001 f8c1 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <led_2_On+0x60>)
 8000f22:	f001 f8bb 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <led_2_On+0x68>)
 8000f2c:	f001 f8b6 	bl	800209c <HAL_GPIO_WritePin>

	// 2	a b g d e = 1 / 0

	// 3	a b c d g = 1 / 0
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40020800 	.word	0x40020800

08000f40 <led_3_On>:

void led_3_On()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	// 1	b c = 1 / 0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <led_3_On+0x60>)
 8000f4c:	f001 f8a6 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	4813      	ldr	r0, [pc, #76]	; (8000fa4 <led_3_On+0x64>)
 8000f58:	f001 f8a0 	bl	800209c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f62:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <led_3_On+0x60>)
 8000f64:	f001 f89a 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <led_3_On+0x64>)
 8000f6e:	f001 f895 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <led_3_On+0x64>)
 8000f78:	f001 f890 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <led_3_On+0x64>)
 8000f82:	f001 f88b 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <led_3_On+0x60>)
 8000f8e:	f001 f885 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <led_3_On+0x68>)
 8000f98:	f001 f880 	bl	800209c <HAL_GPIO_WritePin>

	// 2	a b g d e = 1 / 0

	// 3	a b c d g = 1 / 0
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800

08000fac <stepMoter>:

#include "stepper.h"

void stepMoter(uint8_t step)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <stepMoter+0x64>)
 8000fba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <stepMoter+0x68>)
 8000fc6:	f001 f869 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a10      	ldr	r2, [pc, #64]	; (8001010 <stepMoter+0x64>)
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <stepMoter+0x68>)
 8000fdc:	f001 f85e 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <stepMoter+0x64>)
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	461a      	mov	r2, r3
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <stepMoter+0x68>)
 8000ff0:	f001 f854 	bl	800209c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <stepMoter+0x64>)
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	461a      	mov	r2, r3
 8001000:	2120      	movs	r1, #32
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <stepMoter+0x68>)
 8001004:	f001 f84a 	bl	800209c <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08004904 	.word	0x08004904
 8001014:	40020800 	.word	0x40020800

08001018 <rotateSteps>:

void rotateSteps(uint16_t steps, uint8_t direction)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	717b      	strb	r3, [r7, #5]
	for(uint16_t i = 0; i < steps; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	81fb      	strh	r3, [r7, #14]
 800102c:	e01d      	b.n	800106a <rotateSteps+0x52>
	{
		// 회전 방향에 맞춰서 스텝 패턴 설정
		uint8_t step;
		if(direction == DIR_CW || direction == 'c')
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <rotateSteps+0x22>
 8001034:	797b      	ldrb	r3, [r7, #5]
 8001036:	2b63      	cmp	r3, #99	; 0x63
 8001038:	d105      	bne.n	8001046 <rotateSteps+0x2e>
		{
			step = i % 8;		// 시계
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	737b      	strb	r3, [r7, #13]
 8001044:	e006      	b.n	8001054 <rotateSteps+0x3c>
		}
		else
		{
			step = 7 - (i % 8);	// 반 시계
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	737b      	strb	r3, [r7, #13]
		}
		stepMoter(step);
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffa8 	bl	8000fac <stepMoter>
		delay_us(1000);	//각 스텝간의 지연
 800105c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001060:	f7ff feda 	bl	8000e18 <delay_us>
	for(uint16_t i = 0; i < steps; i++)
 8001064:	89fb      	ldrh	r3, [r7, #14]
 8001066:	3301      	adds	r3, #1
 8001068:	81fb      	strh	r3, [r7, #14]
 800106a:	89fa      	ldrh	r2, [r7, #14]
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3dd      	bcc.n	800102e <rotateSteps+0x16>
	}
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <rotateDegrees>:

void rotateDegrees(uint16_t degrees, uint8_t direction)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	460a      	mov	r2, r1
 8001086:	80fb      	strh	r3, [r7, #6]
 8001088:	4613      	mov	r3, r2
 800108a:	717b      	strb	r3, [r7, #5]
	uint16_t steps = (uint16_t)(((uint32_t)degrees * STEPS_PER_REVOLATION) / 360);
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <rotateDegrees+0x34>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	81fb      	strh	r3, [r7, #14]

	rotateSteps(steps, direction);
 800109c:	797a      	ldrb	r2, [r7, #5]
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ffb8 	bl	8001018 <rotateSteps>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	16c16c17 	.word	0x16c16c17

080010b4 <HAL_UART_RxCpltCallback>:


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]





}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <hwInit>:

#include "hw.h"

void hwInit()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	ledInit();
 80010cc:	f7ff fec0 	bl	8000e50 <ledInit>
	buttonInit();
 80010d0:	f7ff fe2e 	bl	8000d30 <buttonInit>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <delay>:


//할 딜레이 함수 대체
void delay(uint32_t time_ms)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_ms);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fc77 	bl	80019d4 <HAL_Delay>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <millis>:

// 전원 입력후에 카운트 값을 변환하는 함수
// 시스템 틱을 이용
uint32_t millis()
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
	uint32_t tick = HAL_GetTick();
 80010f4:	f000 fc62 	bl	80019bc <HAL_GetTick>
 80010f8:	6078      	str	r0, [r7, #4]
	return tick;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fbf2 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f810 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 f942 	bl	8001398 <MX_GPIO_Init>
  MX_TIM10_Init();
 8001114:	f000 f8ce 	bl	80012b4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8001118:	f000 f914 	bl	8001344 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800111c:	f000 f870 	bl	8001200 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001120:	f000 f8ec 	bl	80012fc <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  apInit();
 8001124:	f7ff f9d6 	bl	80004d4 <apInit>
  apMain();
 8001128:	f7ff fc50 	bl	80009cc <apMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800112c:	e7fe      	b.n	800112c <main+0x28>
	...

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f003 fba8 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xc8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <SystemClock_Config+0xc8>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemClock_Config+0xcc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a20      	ldr	r2, [pc, #128]	; (80011fc <SystemClock_Config+0xcc>)
 800117a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ac:	2304      	movs	r3, #4
 80011ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 ffa3 	bl	8002100 <HAL_RCC_OscConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c0:	f000 f9ca 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c4:	230f      	movs	r3, #15
 80011c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	2103      	movs	r1, #3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fa05 	bl	80025f0 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011ec:	f000 f9b4 	bl	8001558 <Error_Handler>
  }
}
 80011f0:	bf00      	nop
 80011f2:	3750      	adds	r7, #80	; 0x50
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001222:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_TIM3_Init+0xac>)
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <MX_TIM3_Init+0xb0>)
 8001226:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000-1;
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM3_Init+0xac>)
 800122a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800122e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM3_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM3_Init+0xac>)
 8001238:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_TIM3_Init+0xac>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM3_Init+0xac>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800124a:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM3_Init+0xac>)
 800124c:	f001 fcc1 	bl	8002bd2 <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001256:	f000 f97f 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <MX_TIM3_Init+0xac>)
 800126a:	f002 fa43 	bl	80036f4 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001274:	f000 f970 	bl	8001558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001278:	2360      	movs	r3, #96	; 0x60
 800127a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800127c:	2364      	movs	r3, #100	; 0x64
 800127e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM3_Init+0xac>)
 8001290:	f001 ff0a 	bl	80030a8 <HAL_TIM_PWM_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800129a:	f000 f95d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM3_Init+0xac>)
 80012a0:	f000 f9f6 	bl	8001690 <HAL_TIM_MspPostInit>

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000006c 	.word	0x2000006c
 80012b0:	40000400 	.word	0x40000400

080012b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012ba:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <MX_TIM10_Init+0x44>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012c0:	2263      	movs	r2, #99	; 0x63
 80012c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_TIM10_Init+0x40>)
 80012e0:	f001 fba6 	bl	8002a30 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80012ea:	f000 f935 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000b4 	.word	0x200000b4
 80012f8:	40014400 	.word	0x40014400

080012fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_TIM11_Init+0x40>)
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <MX_TIM11_Init+0x44>)
 8001304:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1000-1;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_TIM11_Init+0x40>)
 8001308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_TIM11_Init+0x40>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_TIM11_Init+0x40>)
 8001316:	f242 720f 	movw	r2, #9999	; 0x270f
 800131a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_TIM11_Init+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_TIM11_Init+0x40>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_TIM11_Init+0x40>)
 800132a:	f001 fb81 	bl	8002a30 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001334:	f000 f910 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000fc 	.word	0x200000fc
 8001340:	40014800 	.word	0x40014800

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f002 fa3c 	bl	80037f8 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f8e7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000144 	.word	0x20000144
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b65      	ldr	r3, [pc, #404]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a64      	ldr	r2, [pc, #400]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b62      	ldr	r3, [pc, #392]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a56      	ldr	r2, [pc, #344]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b54      	ldr	r3, [pc, #336]	; (8001548 <MX_GPIO_Init+0x1b0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <MX_GPIO_Init+0x1b0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <MX_GPIO_Init+0x1b0>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b4d      	ldr	r3, [pc, #308]	; (8001548 <MX_GPIO_Init+0x1b0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001424:	4849      	ldr	r0, [pc, #292]	; (800154c <MX_GPIO_Init+0x1b4>)
 8001426:	f000 fe39 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001430:	4847      	ldr	r0, [pc, #284]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001432:	f000 fe33 	bl	800209c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800143c:	4845      	ldr	r0, [pc, #276]	; (8001554 <MX_GPIO_Init+0x1bc>)
 800143e:	f000 fe2d 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001448:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	483d      	ldr	r0, [pc, #244]	; (8001550 <MX_GPIO_Init+0x1b8>)
 800145a:	f000 fc83 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800145e:	2307      	movs	r3, #7
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4837      	ldr	r0, [pc, #220]	; (8001550 <MX_GPIO_Init+0x1b8>)
 8001472:	f000 fc77 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001476:	2313      	movs	r3, #19
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4830      	ldr	r0, [pc, #192]	; (800154c <MX_GPIO_Init+0x1b4>)
 800148a:	f000 fc6b 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800148e:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4829      	ldr	r0, [pc, #164]	; (800154c <MX_GPIO_Init+0x1b4>)
 80014a8:	f000 fc5c 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4822      	ldr	r0, [pc, #136]	; (800154c <MX_GPIO_Init+0x1b4>)
 80014c2:	f000 fc4f 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014c6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80014ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	481c      	ldr	r0, [pc, #112]	; (8001550 <MX_GPIO_Init+0x1b8>)
 80014e0:	f000 fc40 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014e4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80014e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <MX_GPIO_Init+0x1bc>)
 80014fe:	f000 fc31 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001502:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001508:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <MX_GPIO_Init+0x1bc>)
 800151a:	f000 fc23 	bl	8001d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	2017      	movs	r0, #23
 8001524:	f000 fb55 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001528:	2017      	movs	r0, #23
 800152a:	f000 fb6e 	bl	8001c0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	2028      	movs	r0, #40	; 0x28
 8001534:	f000 fb4d 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f000 fb66 	bl	8001c0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020800 	.word	0x40020800
 8001554:	40020400 	.word	0x40020400

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_MspInit+0x4c>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_MspInit+0x4c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_TIM_PWM_MspInit+0x48>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d115      	bne.n	80015f2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_TIM_PWM_MspInit+0x4c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_TIM_PWM_MspInit+0x4c>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_TIM_PWM_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	201d      	movs	r0, #29
 80015e8:	f000 faf3 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ec:	201d      	movs	r0, #29
 80015ee:	f000 fb0c 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40000400 	.word	0x40000400
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_TIM_Base_MspInit+0x80>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d116      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2019      	movs	r0, #25
 8001638:	f000 facb 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800163c:	2019      	movs	r0, #25
 800163e:	f000 fae4 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001642:	e01a      	b.n	800167a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <HAL_TIM_Base_MspInit+0x88>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d115      	bne.n	800167a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	201a      	movs	r0, #26
 8001670:	f000 faaf 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001674:	201a      	movs	r0, #26
 8001676:	f000 fac8 	bl	8001c0a <HAL_NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40014400 	.word	0x40014400
 8001688:	40023800 	.word	0x40023800
 800168c:	40014800 	.word	0x40014800

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_TIM_MspPostInit+0x68>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11d      	bne.n	80016ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_TIM_MspPostInit+0x6c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ce:	2340      	movs	r3, #64	; 0x40
 80016d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016de:	2302      	movs	r3, #2
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_TIM_MspPostInit+0x70>)
 80016ea:	f000 fb3b 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000400 	.word	0x40000400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000

08001704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1d      	ldr	r2, [pc, #116]	; (8001798 <HAL_UART_MspInit+0x94>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d133      	bne.n	800178e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_MspInit+0x98>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a1b      	ldr	r2, [pc, #108]	; (800179c <HAL_UART_MspInit+0x98>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_UART_MspInit+0x98>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_MspInit+0x98>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_UART_MspInit+0x98>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_UART_MspInit+0x98>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800175e:	230c      	movs	r3, #12
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176e:	2307      	movs	r3, #7
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <HAL_UART_MspInit+0x9c>)
 800177a:	f000 faf3 	bl	8001d64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2026      	movs	r0, #38	; 0x26
 8001784:	f000 fa25 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001788:	2026      	movs	r0, #38	; 0x26
 800178a:	f000 fa3e 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40004400 	.word	0x40004400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f8d0 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017fc:	2080      	movs	r0, #128	; 0x80
 80017fe:	f000 fc67 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800180e:	f001 fb43 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000b4 	.word	0x200000b4

0800181c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001822:	f001 fb39 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000fc 	.word	0x200000fc

08001830 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM3_IRQHandler+0x10>)
 8001836:	f001 fb2f 	bl	8002e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000006c 	.word	0x2000006c

08001844 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USART2_IRQHandler+0x10>)
 800184a:	f002 f8f9 	bl	8003a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000144 	.word	0x20000144

08001858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800185c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001860:	f000 fc36 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001868:	f000 fc32 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800186c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001870:	f000 fc2e 	bl	80020d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x20>)
 800187e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <SystemInit+0x20>)
 8001884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffd7 	bl	8001878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f002 ffeb 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fc19 	bl	8001104 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80018e0:	0800494c 	.word	0x0800494c
  ldr r2, =_sbss
 80018e4:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80018e8:	2000018c 	.word	0x2000018c

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 f94f 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fe1e 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f967 	bl	8001c26 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f92f 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000003c 	.word	0x2000003c
 800198c:	20000044 	.word	0x20000044
 8001990:	20000040 	.word	0x20000040

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000044 	.word	0x20000044
 80019b8:	20000188 	.word	0x20000188

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000188 	.word	0x20000188

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000044 	.word	0x20000044

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff feb6 	bl	80019bc <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d008      	beq.n	8001c70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e052      	b.n	8001d16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0216 	bic.w	r2, r2, #22
 8001c7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d103      	bne.n	8001ca0 <HAL_DMA_Abort+0x62>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc0:	e013      	b.n	8001cea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc2:	f7ff fe7b 	bl	80019bc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b05      	cmp	r3, #5
 8001cce:	d90c      	bls.n	8001cea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e015      	b.n	8001d16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e4      	bne.n	8001cc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	223f      	movs	r2, #63	; 0x3f
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d004      	beq.n	8001d3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00c      	b.n	8001d56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2205      	movs	r2, #5
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e159      	b.n	8002034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 8148 	bne.w	800202e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d005      	beq.n	8001db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d130      	bne.n	8001e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dec:	2201      	movs	r2, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 0201 	and.w	r2, r3, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d017      	beq.n	8001e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	08da      	lsrs	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3208      	adds	r2, #8
 8001e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0203 	and.w	r2, r3, #3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a2 	beq.w	800202e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_GPIO_Init+0x2e8>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f06:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a49      	ldr	r2, [pc, #292]	; (8002054 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x202>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a48      	ldr	r2, [pc, #288]	; (8002058 <HAL_GPIO_Init+0x2f4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1fe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a47      	ldr	r2, [pc, #284]	; (800205c <HAL_GPIO_Init+0x2f8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1fa>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a46      	ldr	r2, [pc, #280]	; (8002060 <HAL_GPIO_Init+0x2fc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1f6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_GPIO_Init+0x300>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1f2>
 8001f52:	2304      	movs	r3, #4
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x204>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	; (8002050 <HAL_GPIO_Init+0x2ec>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <HAL_GPIO_Init+0x304>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_GPIO_Init+0x304>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a0f      	ldr	r2, [pc, #60]	; (8002068 <HAL_GPIO_Init+0x304>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f aea2 	bls.w	8001d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	887b      	ldrh	r3, [r7, #2]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9f6 	bl	80004e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e267      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b85      	ldr	r3, [pc, #532]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e242      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b70      	ldr	r3, [pc, #448]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6f      	ldr	r2, [pc, #444]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6d      	ldr	r3, [pc, #436]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6c      	ldr	r2, [pc, #432]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b69      	ldr	r3, [pc, #420]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fc00 	bl	80019bc <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff fbfc 	bl	80019bc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e207      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fbec 	bl	80019bc <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff fbe8 	bl	80019bc <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f3      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b51      	ldr	r3, [pc, #324]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c7      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCC_OscConfig+0x244>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fba1 	bl	80019bc <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff fb9d 	bl	80019bc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a8      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x244>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fb80 	bl	80019bc <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff fb7c 	bl	80019bc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e187      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <HAL_RCC_OscConfig+0x248>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7ff fb60 	bl	80019bc <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff fb5c 	bl	80019bc <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e167      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_OscConfig+0x240>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_OscConfig+0x248>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7ff fb49 	bl	80019bc <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7ff fb45 	bl	80019bc <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e150      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b81      	ldr	r3, [pc, #516]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7d      	ldr	r3, [pc, #500]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a7c      	ldr	r2, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b7a      	ldr	r3, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b77      	ldr	r3, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b74      	ldr	r3, [pc, #464]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a73      	ldr	r2, [pc, #460]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7ff fb05 	bl	80019bc <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7ff fb01 	bl	80019bc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e10c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x474>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ea>
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b5f      	ldr	r3, [pc, #380]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f6:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	; 0x70
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	4a5b      	ldr	r2, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	; 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a57      	ldr	r2, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a54      	ldr	r2, [pc, #336]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7ff fac6 	bl	80019bc <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7ff fac2 	bl	80019bc <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0cb      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x334>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff fab0 	bl	80019bc <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7ff faac 	bl	80019bc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b5      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d05c      	beq.n	8002564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d141      	bne.n	8002536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fa80 	bl	80019bc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff fa7c 	bl	80019bc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e087      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	491b      	ldr	r1, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7ff fa55 	bl	80019bc <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff fa51 	bl	80019bc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e05c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x416>
 8002534:	e054      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fa3e 	bl	80019bc <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7ff fa3a 	bl	80019bc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e045      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d121      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11a      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7ff f96c 	bl	80019bc <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7ff f968 	bl	80019bc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f8cc 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08004924 	.word	0x08004924
 80027b4:	2000003c 	.word	0x2000003c
 80027b8:	20000040 	.word	0x20000040

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b094      	sub	sp, #80	; 0x50
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	2300      	movs	r3, #0
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027cc:	2300      	movs	r3, #0
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b79      	ldr	r3, [pc, #484]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80e1 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e0db      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027f4:	e0db      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b73      	ldr	r3, [pc, #460]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80027f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027fa:	e0d8      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002804:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	63bb      	str	r3, [r7, #56]	; 0x38
 800281c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800281e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	633b      	str	r3, [r7, #48]	; 0x30
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
 800282a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800282e:	4622      	mov	r2, r4
 8002830:	462b      	mov	r3, r5
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4621      	mov	r1, r4
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	6139      	str	r1, [r7, #16]
 800284c:	4629      	mov	r1, r5
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	ebb2 0801 	subs.w	r8, r2, r1
 8002874:	4659      	mov	r1, fp
 8002876:	eb63 0901 	sbc.w	r9, r3, r1
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288e:	4690      	mov	r8, r2
 8002890:	4699      	mov	r9, r3
 8002892:	4623      	mov	r3, r4
 8002894:	eb18 0303 	adds.w	r3, r8, r3
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	462b      	mov	r3, r5
 800289c:	eb49 0303 	adc.w	r3, r9, r3
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ae:	4629      	mov	r1, r5
 80028b0:	024b      	lsls	r3, r1, #9
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b8:	4621      	mov	r1, r4
 80028ba:	024a      	lsls	r2, r1, #9
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c2:	2200      	movs	r2, #0
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028cc:	f7fd fc84 	bl	80001d8 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d8:	e058      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	2200      	movs	r2, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	4611      	mov	r1, r2
 80028e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0159      	lsls	r1, r3, #5
 8002902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002906:	0150      	lsls	r0, r2, #5
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4641      	mov	r1, r8
 800290e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002912:	4649      	mov	r1, r9
 8002914:	eb63 0b01 	sbc.w	fp, r3, r1
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800292c:	ebb2 040a 	subs.w	r4, r2, sl
 8002930:	eb63 050b 	sbc.w	r5, r3, fp
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	00eb      	lsls	r3, r5, #3
 800293e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002942:	00e2      	lsls	r2, r4, #3
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	4643      	mov	r3, r8
 800294a:	18e3      	adds	r3, r4, r3
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	464b      	mov	r3, r9
 8002950:	eb45 0303 	adc.w	r3, r5, r3
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002962:	4629      	mov	r1, r5
 8002964:	028b      	lsls	r3, r1, #10
 8002966:	4621      	mov	r1, r4
 8002968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800296c:	4621      	mov	r1, r4
 800296e:	028a      	lsls	r2, r1, #10
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002976:	2200      	movs	r2, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	61fa      	str	r2, [r7, #28]
 800297c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002980:	f7fd fc2a 	bl	80001d8 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800299c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3750      	adds	r7, #80	; 0x50
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	2000003c 	.word	0x2000003c

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08004934 	.word	0x08004934

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffdc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08004934 	.word	0x08004934

08002a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e041      	b.n	8002ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fdd4 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f000 fc0e 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d001      	beq.n	8002ae8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e03c      	b.n	8002b62 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_TIM_Base_Start+0xa0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_TIM_Base_Start+0x5c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d013      	beq.n	8002b2c <HAL_TIM_Base_Start+0x5c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_TIM_Base_Start+0xa4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_TIM_Base_Start+0x5c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_TIM_Base_Start+0xa8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_TIM_Base_Start+0x5c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_TIM_Base_Start+0xac>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_TIM_Base_Start+0x5c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_TIM_Base_Start+0xb0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d010      	beq.n	8002b60 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	e007      	b.n	8002b60 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800
 8002b7c:	40000c00 	.word	0x40000c00
 8002b80:	40014000 	.word	0x40014000

08002b84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <HAL_TIM_Base_Stop+0x38>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	f240 4344 	movw	r3, #1092	; 0x444
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_Base_Stop+0x38>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e041      	b.n	8002c68 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d106      	bne.n	8002bfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fe fcdb 	bl	80015b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 fb3d 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_TIM_PWM_Start+0x24>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e022      	b.n	8002cda <HAL_TIM_PWM_Start+0x6a>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d109      	bne.n	8002cae <HAL_TIM_PWM_Start+0x3e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e015      	b.n	8002cda <HAL_TIM_PWM_Start+0x6a>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d109      	bne.n	8002cc8 <HAL_TIM_PWM_Start+0x58>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e008      	b.n	8002cda <HAL_TIM_PWM_Start+0x6a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e068      	b.n	8002db4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0x82>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	e013      	b.n	8002d1a <HAL_TIM_PWM_Start+0xaa>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x92>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	e00b      	b.n	8002d1a <HAL_TIM_PWM_Start+0xaa>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_PWM_Start+0xa2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	e003      	b.n	8002d1a <HAL_TIM_PWM_Start+0xaa>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fcc0 	bl	80036a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <HAL_TIM_PWM_Start+0x14c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d107      	bne.n	8002d42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_TIM_PWM_Start+0x14c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d018      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x10e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d013      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x10e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_TIM_PWM_Start+0x150>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00e      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x10e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a17      	ldr	r2, [pc, #92]	; (8002dc4 <HAL_TIM_PWM_Start+0x154>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x10e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <HAL_TIM_PWM_Start+0x158>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_TIM_PWM_Start+0x10e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <HAL_TIM_PWM_Start+0x15c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d111      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b06      	cmp	r3, #6
 8002d8e:	d010      	beq.n	8002db2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da0:	e007      	b.n	8002db2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc60 	bl	80036a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <HAL_TIM_PWM_Stop+0xc4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d117      	bne.n	8002e22 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <HAL_TIM_PWM_Stop+0x52>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	f240 4344 	movw	r3, #1092	; 0x444
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_PWM_Stop+0x52>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_TIM_PWM_Stop+0x82>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	f240 4344 	movw	r3, #1092	; 0x444
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_PWM_Stop+0x82>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Stop+0x92>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	e013      	b.n	8002e8a <HAL_TIM_PWM_Stop+0xba>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Stop+0xa2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e70:	e00b      	b.n	8002e8a <HAL_TIM_PWM_Stop+0xba>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Stop+0xb2>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	e003      	b.n	8002e8a <HAL_TIM_PWM_Stop+0xba>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40010000 	.word	0x40010000

08002e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d122      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d11b      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0202 	mvn.w	r2, #2
 8002ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9ba 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002ee0:	e005      	b.n	8002eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9ac 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9bd 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0204 	mvn.w	r2, #4
 8002f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f990 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f982 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f993 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f966 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f958 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f969 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0210 	mvn.w	r2, #16
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f93c 	bl	8003254 <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f92e 	bl	8003240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f93f 	bl	8003268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0201 	mvn.w	r2, #1
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f908 	bl	800322c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d10e      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b80      	cmp	r3, #128	; 0x80
 8003036:	d107      	bne.n	8003048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fbce 	bl	80037e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d10e      	bne.n	8003074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d107      	bne.n	8003074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800306c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f904 	bl	800327c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b20      	cmp	r3, #32
 8003080:	d10e      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b20      	cmp	r3, #32
 800308e:	d107      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0220 	mvn.w	r2, #32
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb98 	bl	80037d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0ae      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	f200 809f 	bhi.w	8003214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003215 	.word	0x08003215
 80030e4:	08003215 	.word	0x08003215
 80030e8:	08003215 	.word	0x08003215
 80030ec:	08003151 	.word	0x08003151
 80030f0:	08003215 	.word	0x08003215
 80030f4:	08003215 	.word	0x08003215
 80030f8:	08003215 	.word	0x08003215
 80030fc:	08003193 	.word	0x08003193
 8003100:	08003215 	.word	0x08003215
 8003104:	08003215 	.word	0x08003215
 8003108:	08003215 	.word	0x08003215
 800310c:	080031d3 	.word	0x080031d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f93a 	bl	8003390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0204 	bic.w	r2, r2, #4
 800313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
      break;
 800314e:	e064      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f980 	bl	800345c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	619a      	str	r2, [r3, #24]
      break;
 8003190:	e043      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f9cb 	bl	8003534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0208 	orr.w	r2, r2, #8
 80031ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0204 	bic.w	r2, r2, #4
 80031bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69d9      	ldr	r1, [r3, #28]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      break;
 80031d0:	e023      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fa15 	bl	8003608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	61da      	str	r2, [r3, #28]
      break;
 8003212:	e002      	b.n	800321a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	75fb      	strb	r3, [r7, #23]
      break;
 8003218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a34      	ldr	r2, [pc, #208]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00f      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00b      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a31      	ldr	r2, [pc, #196]	; (8003378 <TIM_Base_SetConfig+0xe8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a30      	ldr	r2, [pc, #192]	; (800337c <TIM_Base_SetConfig+0xec>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0x38>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a2f      	ldr	r2, [pc, #188]	; (8003380 <TIM_Base_SetConfig+0xf0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d108      	bne.n	80032da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01b      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d017      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <TIM_Base_SetConfig+0xe8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a21      	ldr	r2, [pc, #132]	; (800337c <TIM_Base_SetConfig+0xec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a20      	ldr	r2, [pc, #128]	; (8003380 <TIM_Base_SetConfig+0xf0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <TIM_Base_SetConfig+0xf4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <TIM_Base_SetConfig+0xf8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <TIM_Base_SetConfig+0xfc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <TIM_Base_SetConfig+0xe4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d103      	bne.n	8003360 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	615a      	str	r2, [r3, #20]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800

08003390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0201 	bic.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f023 0302 	bic.w	r3, r3, #2
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a1c      	ldr	r2, [pc, #112]	; (8003458 <TIM_OC1_SetConfig+0xc8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10c      	bne.n	8003406 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0308 	bic.w	r3, r3, #8
 80033f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <TIM_OC1_SetConfig+0xc8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d111      	bne.n	8003432 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800341c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	bf00      	nop
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	40010000 	.word	0x40010000

0800345c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	f023 0210 	bic.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0320 	bic.w	r3, r3, #32
 80034a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <TIM_OC2_SetConfig+0xd4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10d      	bne.n	80034d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <TIM_OC2_SetConfig+0xd4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d113      	bne.n	8003508 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000

08003534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800357c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <TIM_OC3_SetConfig+0xd0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10d      	bne.n	80035ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003598:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <TIM_OC3_SetConfig+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d113      	bne.n	80035de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	621a      	str	r2, [r3, #32]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000

08003608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	031b      	lsls	r3, r3, #12
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <TIM_OC4_SetConfig+0x9c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d109      	bne.n	800367c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800366e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000

080036a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2201      	movs	r2, #1
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	401a      	ands	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e050      	b.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d013      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a16      	ldr	r2, [pc, #88]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10c      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4313      	orrs	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40014000 	.word	0x40014000

080037d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e03f      	b.n	800388a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd ff70 	bl	8001704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fdb5 	bl	80043ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b08a      	sub	sp, #40	; 0x28
 8003896:	af02      	add	r7, sp, #8
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d17c      	bne.n	80039ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_UART_Transmit+0x2c>
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e075      	b.n	80039ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_UART_Transmit+0x3e>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e06e      	b.n	80039ae <HAL_UART_Transmit+0x11c>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e6:	f7fe f869 	bl	80019bc <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003900:	d108      	bne.n	8003914 <HAL_UART_Transmit+0x82>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e003      	b.n	800391c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003924:	e02a      	b.n	800397c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fb33 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e036      	b.n	80039ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10b      	bne.n	800395e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	3302      	adds	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e007      	b.n	800396e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3301      	adds	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1cf      	bne.n	8003926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2200      	movs	r2, #0
 800398e:	2140      	movs	r1, #64	; 0x40
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 fb03 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e006      	b.n	80039ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	4613      	mov	r3, r2
 80039c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d130      	bne.n	8003a32 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Transmit_IT+0x26>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e029      	b.n	8003a34 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Transmit_IT+0x38>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e022      	b.n	8003a34 <HAL_UART_Transmit_IT+0x7e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b0ba      	sub	sp, #232	; 0xe8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x66>
 8003a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fbc9 	bl	8004236 <UART_Receive_IT>
      return;
 8003aa4:	e256      	b.n	8003f54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80de 	beq.w	8003c6c <HAL_UART_IRQHandler+0x22c>
 8003ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80d1 	beq.w	8003c6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_UART_IRQHandler+0xae>
 8003ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_UART_IRQHandler+0xd2>
 8003afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0202 	orr.w	r2, r3, #2
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_UART_IRQHandler+0xf6>
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f043 0204 	orr.w	r2, r3, #4
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d011      	beq.n	8003b66 <HAL_UART_IRQHandler+0x126>
 8003b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d105      	bne.n	8003b5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d005      	beq.n	8003b66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0208 	orr.w	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 81ed 	beq.w	8003f4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_UART_IRQHandler+0x14e>
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fb54 	bl	8004236 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_UART_IRQHandler+0x17a>
 8003bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d04f      	beq.n	8003c5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa5c 	bl	8004078 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d141      	bne.n	8003c52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3314      	adds	r3, #20
 8003bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1d9      	bne.n	8003bce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d013      	beq.n	8003c4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4a7d      	ldr	r2, [pc, #500]	; (8003e1c <HAL_UART_IRQHandler+0x3dc>)
 8003c28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe f875 	bl	8001d1e <HAL_DMA_Abort_IT>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c44:	4610      	mov	r0, r2
 8003c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00e      	b.n	8003c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f990 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e00a      	b.n	8003c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f98c 	bl	8003f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e006      	b.n	8003c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f988 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c66:	e170      	b.n	8003f4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	bf00      	nop
    return;
 8003c6a:	e16e      	b.n	8003f4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f040 814a 	bne.w	8003f0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8143 	beq.w	8003f0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 813c 	beq.w	8003f0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c92:	2300      	movs	r3, #0
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60bb      	str	r3, [r7, #8]
 8003ca6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	f040 80b4 	bne.w	8003e20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8140 	beq.w	8003f4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	f080 8139 	bcs.w	8003f4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ce2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	f000 8088 	beq.w	8003e02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1d9      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3314      	adds	r3, #20
 8003d44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e1      	bne.n	8003d3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003da0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	f023 0310 	bic.w	r3, r3, #16
 8003dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003de4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003de6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e3      	bne.n	8003dc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd ff1e 	bl	8001c3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f8b6 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e18:	e099      	b.n	8003f4e <HAL_UART_IRQHandler+0x50e>
 8003e1a:	bf00      	nop
 8003e1c:	0800413f 	.word	0x0800413f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 808b 	beq.w	8003f52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8086 	beq.w	8003f52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e3      	bne.n	8003e46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ea2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e3      	bne.n	8003e7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0310 	bic.w	r3, r3, #16
 8003eda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ee8:	61fa      	str	r2, [r7, #28]
 8003eea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eec:	69b9      	ldr	r1, [r7, #24]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	e841 2300 	strex	r3, r2, [r1]
 8003ef4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e3      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f83e 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f08:	e023      	b.n	8003f52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_UART_IRQHandler+0x4ea>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f91f 	bl	8004166 <UART_Transmit_IT>
    return;
 8003f28:	e014      	b.n	8003f54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00e      	beq.n	8003f54 <HAL_UART_IRQHandler+0x514>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f95f 	bl	8004206 <UART_EndTransmit_IT>
    return;
 8003f48:	e004      	b.n	8003f54 <HAL_UART_IRQHandler+0x514>
    return;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_UART_IRQHandler+0x514>
      return;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_UART_IRQHandler+0x514>
      return;
 8003f52:	bf00      	nop
  }
}
 8003f54:	37e8      	adds	r7, #232	; 0xe8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop

08003f5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b090      	sub	sp, #64	; 0x40
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fac:	e050      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d04c      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fbc:	f7fd fcfe 	bl	80019bc <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d241      	bcs.n	8004050 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fec:	637a      	str	r2, [r7, #52]	; 0x34
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004020:	623a      	str	r2, [r7, #32]
 8004022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
   return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e00f      	b.n	8004070 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4013      	ands	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	bf0c      	ite	eq
 8004060:	2301      	moveq	r3, #1
 8004062:	2300      	movne	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	429a      	cmp	r2, r3
 800406c:	d09f      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3740      	adds	r7, #64	; 0x40
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b095      	sub	sp, #84	; 0x54
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a0:	643a      	str	r2, [r7, #64]	; 0x40
 80040a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3314      	adds	r3, #20
 80040ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3314      	adds	r3, #20
 80040d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e5      	bne.n	80040b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d119      	bne.n	8004124 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0310 	bic.w	r3, r3, #16
 8004106:	647b      	str	r3, [r7, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004110:	61ba      	str	r2, [r7, #24]
 8004112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e5      	bne.n	80040f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004132:	bf00      	nop
 8004134:	3754      	adds	r7, #84	; 0x54
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff ff09 	bl	8003f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d13e      	bne.n	80041f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d114      	bne.n	80041ae <UART_Transmit_IT+0x48>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d110      	bne.n	80041ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	e008      	b.n	80041c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6211      	str	r1, [r2, #32]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fe98 	bl	8003f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08c      	sub	sp, #48	; 0x30
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b22      	cmp	r3, #34	; 0x22
 8004248:	f040 80ab 	bne.w	80043a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004254:	d117      	bne.n	8004286 <UART_Receive_IT+0x50>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d113      	bne.n	8004286 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b29b      	uxth	r3, r3
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	b29a      	uxth	r2, r3
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
 8004284:	e026      	b.n	80042d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d007      	beq.n	80042aa <UART_Receive_IT+0x74>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <UART_Receive_IT+0x82>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e008      	b.n	80042ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29b      	uxth	r3, r3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4619      	mov	r1, r3
 80042e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d15a      	bne.n	800439e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0220 	bic.w	r2, r2, #32
 80042f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	2b01      	cmp	r3, #1
 8004326:	d135      	bne.n	8004394 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	613b      	str	r3, [r7, #16]
   return(result);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	623a      	str	r2, [r7, #32]
 8004350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	69f9      	ldr	r1, [r7, #28]
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	61bb      	str	r3, [r7, #24]
   return(result);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0310 	and.w	r3, r3, #16
 800436c:	2b10      	cmp	r3, #16
 800436e:	d10a      	bne.n	8004386 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fdf9 	bl	8003f84 <HAL_UARTEx_RxEventCallback>
 8004392:	e002      	b.n	800439a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7fc fe8d 	bl	80010b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e002      	b.n	80043a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3730      	adds	r7, #48	; 0x30
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b0c0      	sub	sp, #256	; 0x100
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c8:	68d9      	ldr	r1, [r3, #12]
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	ea40 0301 	orr.w	r3, r0, r1
 80043d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004404:	f021 010c 	bic.w	r1, r1, #12
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004412:	430b      	orrs	r3, r1
 8004414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	6999      	ldr	r1, [r3, #24]
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	ea40 0301 	orr.w	r3, r0, r1
 8004432:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b8f      	ldr	r3, [pc, #572]	; (8004678 <UART_SetConfig+0x2cc>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d005      	beq.n	800444c <UART_SetConfig+0xa0>
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b8d      	ldr	r3, [pc, #564]	; (800467c <UART_SetConfig+0x2d0>)
 8004448:	429a      	cmp	r2, r3
 800444a:	d104      	bne.n	8004456 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800444c:	f7fe fadc 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8004450:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004454:	e003      	b.n	800445e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004456:	f7fe fac3 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 800445a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004468:	f040 810c 	bne.w	8004684 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800446c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004476:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800447a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800447e:	4622      	mov	r2, r4
 8004480:	462b      	mov	r3, r5
 8004482:	1891      	adds	r1, r2, r2
 8004484:	65b9      	str	r1, [r7, #88]	; 0x58
 8004486:	415b      	adcs	r3, r3
 8004488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800448a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800448e:	4621      	mov	r1, r4
 8004490:	eb12 0801 	adds.w	r8, r2, r1
 8004494:	4629      	mov	r1, r5
 8004496:	eb43 0901 	adc.w	r9, r3, r1
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ae:	4690      	mov	r8, r2
 80044b0:	4699      	mov	r9, r3
 80044b2:	4623      	mov	r3, r4
 80044b4:	eb18 0303 	adds.w	r3, r8, r3
 80044b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044bc:	462b      	mov	r3, r5
 80044be:	eb49 0303 	adc.w	r3, r9, r3
 80044c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044da:	460b      	mov	r3, r1
 80044dc:	18db      	adds	r3, r3, r3
 80044de:	653b      	str	r3, [r7, #80]	; 0x50
 80044e0:	4613      	mov	r3, r2
 80044e2:	eb42 0303 	adc.w	r3, r2, r3
 80044e6:	657b      	str	r3, [r7, #84]	; 0x54
 80044e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044f0:	f7fb fe72 	bl	80001d8 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4b61      	ldr	r3, [pc, #388]	; (8004680 <UART_SetConfig+0x2d4>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	011c      	lsls	r4, r3, #4
 8004502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004506:	2200      	movs	r2, #0
 8004508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800450c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004510:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	1891      	adds	r1, r2, r2
 800451a:	64b9      	str	r1, [r7, #72]	; 0x48
 800451c:	415b      	adcs	r3, r3
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004524:	4641      	mov	r1, r8
 8004526:	eb12 0a01 	adds.w	sl, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb43 0b01 	adc.w	fp, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800453c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004544:	4692      	mov	sl, r2
 8004546:	469b      	mov	fp, r3
 8004548:	4643      	mov	r3, r8
 800454a:	eb1a 0303 	adds.w	r3, sl, r3
 800454e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004552:	464b      	mov	r3, r9
 8004554:	eb4b 0303 	adc.w	r3, fp, r3
 8004558:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004568:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800456c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004570:	460b      	mov	r3, r1
 8004572:	18db      	adds	r3, r3, r3
 8004574:	643b      	str	r3, [r7, #64]	; 0x40
 8004576:	4613      	mov	r3, r2
 8004578:	eb42 0303 	adc.w	r3, r2, r3
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
 800457e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004582:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004586:	f7fb fe27 	bl	80001d8 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4611      	mov	r1, r2
 8004590:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <UART_SetConfig+0x2d4>)
 8004592:	fba3 2301 	umull	r2, r3, r3, r1
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2264      	movs	r2, #100	; 0x64
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	1acb      	subs	r3, r1, r3
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045a6:	4b36      	ldr	r3, [pc, #216]	; (8004680 <UART_SetConfig+0x2d4>)
 80045a8:	fba3 2302 	umull	r2, r3, r3, r2
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b4:	441c      	add	r4, r3
 80045b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80045d0:	415b      	adcs	r3, r3
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045d8:	4641      	mov	r1, r8
 80045da:	1851      	adds	r1, r2, r1
 80045dc:	6339      	str	r1, [r7, #48]	; 0x30
 80045de:	4649      	mov	r1, r9
 80045e0:	414b      	adcs	r3, r1
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045f0:	4659      	mov	r1, fp
 80045f2:	00cb      	lsls	r3, r1, #3
 80045f4:	4651      	mov	r1, sl
 80045f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fa:	4651      	mov	r1, sl
 80045fc:	00ca      	lsls	r2, r1, #3
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	4603      	mov	r3, r0
 8004604:	4642      	mov	r2, r8
 8004606:	189b      	adds	r3, r3, r2
 8004608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800460c:	464b      	mov	r3, r9
 800460e:	460a      	mov	r2, r1
 8004610:	eb42 0303 	adc.w	r3, r2, r3
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004624:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800462c:	460b      	mov	r3, r1
 800462e:	18db      	adds	r3, r3, r3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 8004632:	4613      	mov	r3, r2
 8004634:	eb42 0303 	adc.w	r3, r2, r3
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004642:	f7fb fdc9 	bl	80001d8 <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <UART_SetConfig+0x2d4>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <UART_SetConfig+0x2d4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 0207 	and.w	r2, r3, #7
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4422      	add	r2, r4
 8004672:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004674:	e106      	b.n	8004884 <UART_SetConfig+0x4d8>
 8004676:	bf00      	nop
 8004678:	40011000 	.word	0x40011000
 800467c:	40011400 	.word	0x40011400
 8004680:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800468e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004692:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004696:	4642      	mov	r2, r8
 8004698:	464b      	mov	r3, r9
 800469a:	1891      	adds	r1, r2, r2
 800469c:	6239      	str	r1, [r7, #32]
 800469e:	415b      	adcs	r3, r3
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
 80046a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046a6:	4641      	mov	r1, r8
 80046a8:	1854      	adds	r4, r2, r1
 80046aa:	4649      	mov	r1, r9
 80046ac:	eb43 0501 	adc.w	r5, r3, r1
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	00eb      	lsls	r3, r5, #3
 80046ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046be:	00e2      	lsls	r2, r4, #3
 80046c0:	4614      	mov	r4, r2
 80046c2:	461d      	mov	r5, r3
 80046c4:	4643      	mov	r3, r8
 80046c6:	18e3      	adds	r3, r4, r3
 80046c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046cc:	464b      	mov	r3, r9
 80046ce:	eb45 0303 	adc.w	r3, r5, r3
 80046d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046f2:	4629      	mov	r1, r5
 80046f4:	008b      	lsls	r3, r1, #2
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fc:	4621      	mov	r1, r4
 80046fe:	008a      	lsls	r2, r1, #2
 8004700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004704:	f7fb fd68 	bl	80001d8 <__aeabi_uldivmod>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4b60      	ldr	r3, [pc, #384]	; (8004890 <UART_SetConfig+0x4e4>)
 800470e:	fba3 2302 	umull	r2, r3, r3, r2
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	011c      	lsls	r4, r3, #4
 8004716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004720:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004724:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	1891      	adds	r1, r2, r2
 800472e:	61b9      	str	r1, [r7, #24]
 8004730:	415b      	adcs	r3, r3
 8004732:	61fb      	str	r3, [r7, #28]
 8004734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004738:	4641      	mov	r1, r8
 800473a:	1851      	adds	r1, r2, r1
 800473c:	6139      	str	r1, [r7, #16]
 800473e:	4649      	mov	r1, r9
 8004740:	414b      	adcs	r3, r1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004750:	4659      	mov	r1, fp
 8004752:	00cb      	lsls	r3, r1, #3
 8004754:	4651      	mov	r1, sl
 8004756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475a:	4651      	mov	r1, sl
 800475c:	00ca      	lsls	r2, r1, #3
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	4603      	mov	r3, r0
 8004764:	4642      	mov	r2, r8
 8004766:	189b      	adds	r3, r3, r2
 8004768:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800476c:	464b      	mov	r3, r9
 800476e:	460a      	mov	r2, r1
 8004770:	eb42 0303 	adc.w	r3, r2, r3
 8004774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	67bb      	str	r3, [r7, #120]	; 0x78
 8004782:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047a2:	f7fb fd19 	bl	80001d8 <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	4b38      	ldr	r3, [pc, #224]	; (8004890 <UART_SetConfig+0x4e4>)
 80047ae:	fba3 2301 	umull	r2, r3, r3, r1
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2264      	movs	r2, #100	; 0x64
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	1acb      	subs	r3, r1, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	; 0x32
 80047c0:	4a33      	ldr	r2, [pc, #204]	; (8004890 <UART_SetConfig+0x4e4>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047cc:	441c      	add	r4, r3
 80047ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047d2:	2200      	movs	r2, #0
 80047d4:	673b      	str	r3, [r7, #112]	; 0x70
 80047d6:	677a      	str	r2, [r7, #116]	; 0x74
 80047d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	415b      	adcs	r3, r3
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ec:	4641      	mov	r1, r8
 80047ee:	1851      	adds	r1, r2, r1
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	4649      	mov	r1, r9
 80047f4:	414b      	adcs	r3, r1
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004804:	4659      	mov	r1, fp
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4651      	mov	r1, sl
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4642      	mov	r2, r8
 800481a:	189b      	adds	r3, r3, r2
 800481c:	66bb      	str	r3, [r7, #104]	; 0x68
 800481e:	464b      	mov	r3, r9
 8004820:	460a      	mov	r2, r1
 8004822:	eb42 0303 	adc.w	r3, r2, r3
 8004826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	663b      	str	r3, [r7, #96]	; 0x60
 8004832:	667a      	str	r2, [r7, #100]	; 0x64
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004840:	4649      	mov	r1, r9
 8004842:	008b      	lsls	r3, r1, #2
 8004844:	4641      	mov	r1, r8
 8004846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484a:	4641      	mov	r1, r8
 800484c:	008a      	lsls	r2, r1, #2
 800484e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004852:	f7fb fcc1 	bl	80001d8 <__aeabi_uldivmod>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <UART_SetConfig+0x4e4>)
 800485c:	fba3 1302 	umull	r1, r3, r3, r2
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	2164      	movs	r1, #100	; 0x64
 8004864:	fb01 f303 	mul.w	r3, r1, r3
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	3332      	adds	r3, #50	; 0x32
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <UART_SetConfig+0x4e4>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	f003 020f 	and.w	r2, r3, #15
 800487a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4422      	add	r2, r4
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800488a:	46bd      	mov	sp, r7
 800488c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004890:	51eb851f 	.word	0x51eb851f

08004894 <memset>:
 8004894:	4402      	add	r2, r0
 8004896:	4603      	mov	r3, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	; (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	; (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	; (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	; (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 f818 	bl	80048ec <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	08004944 	.word	0x08004944
 80048e0:	08004944 	.word	0x08004944
 80048e4:	08004944 	.word	0x08004944
 80048e8:	08004948 	.word	0x08004948

080048ec <_init>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr

080048f8 <_fini>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr
